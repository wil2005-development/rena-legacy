import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'java'
	id 'application'
	id 'com.github.johnrengelman.shadow' version '7.0.0'
}

mainClassName = 'net.crimsonite.rena.RenaBot'

def versionObject = new Version(major: 0, minor: 1, revision: 0)
version versionObject.toString()

sourceCompatibility = 16
targetCompatibility = 16

repositories {
	jcenter()
	mavenCentral()
	maven { 
		name 'm2-dv8tion'
		url = 'https://m2.dv8tion.net/releases' 
	}
	maven { url = 'https://jitpack.io' }
}

dependencies {
  // Core
	implementation 'net.dv8tion:JDA:4.3.0_331'
	implementation 'com.jagrosh:jda-utilities-commons:3.0.5'
	
	// Data Manager
	implementation 'com.rethinkdb:rethinkdb-driver:2.3.3'
	implementation 'redis.clients:jedis:3.7.0'
	
	// Misc
	implementation 'ch.qos.logback:logback-classic:1.2.6'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5'
}

def gitRevision() {
    def revString = new ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-parse", "HEAD")
        standardOutput = revString
    }
    return revString.toString().trim()
}

task filterVersion(type: Copy) {
	from 'src/main/java'
	into 'build/filtered'
	filter (ReplaceTokens, tokens:[
		VERSION: versionObject.toString(),
		GIT_REVISION: gitRevision()
	])
}

task listLanguages {
	doLast {
		def languages = new FileOutputStream(new File("src/main/resources/languages/languages.txt"))
		File dir = new File("src/main/resources/languages")
		
		dir.listFiles().each { File file ->
			if (file.getName().endsWith(".json")) {
				languages.write(file.getName().replace(".json", "\n").getBytes())
			}
		}
	}
}

jar {
    archiveBaseName = project.name
    manifest {
        attributes 'Implementation-Version': archiveVersion
        attributes 'Main-Class': mainClassName
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

shadowJar {
    archiveClassifier.set(null)
}

compileJava {
	source = 'build/filtered'
	options.encoding = 'UTF-8'
	
	dependsOn filterVersion
	dependsOn listLanguages
}

class Version {
	String major, minor, revision
	
	String toString() {
		"${major}.${minor}.${revision}"
	}
}

build.dependsOn shadowJar
